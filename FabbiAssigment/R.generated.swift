//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 25 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: breakfast
      ///
      /// Key: breakfast
      ///
      /// Locales: en
      var breakfast: RswiftResources.StringResource { .init(key: "breakfast", tableName: "Localizable", source: source, developmentValue: "breakfast", comment: nil) }

      /// en translation: dinner
      ///
      /// Key: dinner
      ///
      /// Locales: en
      var dinner: RswiftResources.StringResource { .init(key: "dinner", tableName: "Localizable", source: source, developmentValue: "dinner", comment: nil) }

      /// en translation: Dishes:
      ///
      /// Key: dishes
      ///
      /// Locales: en
      var dishes: RswiftResources.StringResource { .init(key: "dishes", tableName: "Localizable", source: source, developmentValue: "Dishes:", comment: nil) }

      /// en translation: Please select a Dish!
      ///
      /// Key: dishes_error
      ///
      /// Locales: en
      var dishes_error: RswiftResources.StringResource { .init(key: "dishes_error", tableName: "Localizable", source: source, developmentValue: "Please select a Dish!", comment: nil) }

      /// en translation: lunch
      ///
      /// Key: lunch
      ///
      /// Locales: en
      var lunch: RswiftResources.StringResource { .init(key: "lunch", tableName: "Localizable", source: source, developmentValue: "lunch", comment: nil) }

      /// en translation: Meal:
      ///
      /// Key: meal
      ///
      /// Locales: en
      var meal: RswiftResources.StringResource { .init(key: "meal", tableName: "Localizable", source: source, developmentValue: "Meal:", comment: nil) }

      /// en translation: Please select a meal!
      ///
      /// Key: meal_error
      ///
      /// Locales: en
      var meal_error: RswiftResources.StringResource { .init(key: "meal_error", tableName: "Localizable", source: source, developmentValue: "Please select a meal!", comment: nil) }

      /// en translation: Next
      ///
      /// Key: next_button
      ///
      /// Locales: en
      var next_button: RswiftResources.StringResource { .init(key: "next_button", tableName: "Localizable", source: source, developmentValue: "Next", comment: nil) }

      /// en translation: Number of people:
      ///
      /// Key: no_people
      ///
      /// Locales: en
      var no_people: RswiftResources.StringResource { .init(key: "no_people", tableName: "Localizable", source: source, developmentValue: "Number of people:", comment: nil) }

      /// en translation: Please enter number of people! (Max 10)
      ///
      /// Key: no_people_error
      ///
      /// Locales: en
      var no_people_error: RswiftResources.StringResource { .init(key: "no_people_error", tableName: "Localizable", source: source, developmentValue: "Please enter number of people!\n(Max 10)", comment: nil) }

      /// en translation: Please enter no of servings!
      ///
      /// Key: no_servings_error
      ///
      /// Locales: en
      var no_servings_error: RswiftResources.StringResource { .init(key: "no_servings_error", tableName: "Localizable", source: source, developmentValue: "Please enter no of servings!", comment: nil) }

      /// en translation: Previous
      ///
      /// Key: previous_button
      ///
      /// Locales: en
      var previous_button: RswiftResources.StringResource { .init(key: "previous_button", tableName: "Localizable", source: source, developmentValue: "Previous", comment: nil) }

      /// en translation: Restaurant:
      ///
      /// Key: restaurant
      ///
      /// Locales: en
      var restaurant: RswiftResources.StringResource { .init(key: "restaurant", tableName: "Localizable", source: source, developmentValue: "Restaurant:", comment: nil) }

      /// en translation: Please select a restaurant!
      ///
      /// Key: restaurant_error
      ///
      /// Locales: en
      var restaurant_error: RswiftResources.StringResource { .init(key: "restaurant_error", tableName: "Localizable", source: source, developmentValue: "Please select a restaurant!", comment: nil) }

      /// en translation: Please select a dish:
      ///
      /// Key: select_dish
      ///
      /// Locales: en
      var select_dish: RswiftResources.StringResource { .init(key: "select_dish", tableName: "Localizable", source: source, developmentValue: "Please select a dish:", comment: nil) }

      /// en translation: Please select a meal:
      ///
      /// Key: select_meal
      ///
      /// Locales: en
      var select_meal: RswiftResources.StringResource { .init(key: "select_meal", tableName: "Localizable", source: source, developmentValue: "Please select a meal:", comment: nil) }

      /// en translation: Please enter no of servings:
      ///
      /// Key: select_no_servings
      ///
      /// Locales: en
      var select_no_servings: RswiftResources.StringResource { .init(key: "select_no_servings", tableName: "Localizable", source: source, developmentValue: "Please enter no of servings:", comment: nil) }

      /// en translation: Please enter number of people:
      ///
      /// Key: select_number_people
      ///
      /// Locales: en
      var select_number_people: RswiftResources.StringResource { .init(key: "select_number_people", tableName: "Localizable", source: source, developmentValue: "Please enter number of people:", comment: nil) }

      /// en translation: Please select a restaurant:
      ///
      /// Key: select_restaurant
      ///
      /// Locales: en
      var select_restaurant: RswiftResources.StringResource { .init(key: "select_restaurant", tableName: "Localizable", source: source, developmentValue: "Please select a restaurant:", comment: nil) }

      /// en translation: Select meal
      ///
      /// Key: step_1
      ///
      /// Locales: en
      var step_1: RswiftResources.StringResource { .init(key: "step_1", tableName: "Localizable", source: source, developmentValue: "Select meal", comment: nil) }

      /// en translation: Select restaurant
      ///
      /// Key: step_2
      ///
      /// Locales: en
      var step_2: RswiftResources.StringResource { .init(key: "step_2", tableName: "Localizable", source: source, developmentValue: "Select restaurant", comment: nil) }

      /// en translation: Select dishes
      ///
      /// Key: step_3
      ///
      /// Locales: en
      var step_3: RswiftResources.StringResource { .init(key: "step_3", tableName: "Localizable", source: source, developmentValue: "Select dishes", comment: nil) }

      /// en translation: Review
      ///
      /// Key: step_4
      ///
      /// Locales: en
      var step_4: RswiftResources.StringResource { .init(key: "step_4", tableName: "Localizable", source: source, developmentValue: "Review", comment: nil) }

      /// en translation: Submit
      ///
      /// Key: submit_button
      ///
      /// Locales: en
      var submit_button: RswiftResources.StringResource { .init(key: "submit_button", tableName: "Localizable", source: source, developmentValue: "Submit", comment: nil) }

      /// en translation: You can only choose a maximum of 10 servings, please update no of servings!
      ///
      /// Key: total_dishes_error
      ///
      /// Locales: en
      var total_dishes_error: RswiftResources.StringResource { .init(key: "total_dishes_error", tableName: "Localizable", source: source, developmentValue: "You can only choose a maximum of 10 servings, please update no of servings!", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `DarkGreen`.
    var darkGreen: RswiftResources.ColorResource { .init(name: "DarkGreen", path: [], bundle: bundle) }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `dishes.json`.
    var dishesJson: RswiftResources.FileResource { .init(name: "dishes", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ButtonCell`.
    var buttonCell: RswiftResources.NibReference<ButtonCell> { .init(name: "ButtonCell", bundle: bundle) }

    /// Nib `ButtonView`.
    var buttonView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ButtonView", bundle: bundle) }

    /// Nib `DetailCell`.
    var detailCell: RswiftResources.NibReference<DetailCell> { .init(name: "DetailCell", bundle: bundle) }

    /// Nib `DetailView`.
    var detailView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DetailView", bundle: bundle) }

    /// Nib `SelectedDishCell`.
    var selectedDishCell: RswiftResources.NibReference<SelectedDishCell> { .init(name: "SelectedDishCell", bundle: bundle) }

    /// Nib `StepBarView`.
    var stepBarView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "StepBarView", bundle: bundle) }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "minus.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'minus.circle.fill' is used in nib 'ButtonCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus.circle.fill' is used in nib 'ButtonCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "DarkGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'DarkGreen' is used in nib 'ButtonCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "LightGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'LightGreen' is used in nib 'StepBarView', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var category: category { .init(bundle: bundle) }
    var dishes: dishes { .init(bundle: bundle) }
    var finish: finish { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var restaurant: restaurant { .init(bundle: bundle) }
    var review: review { .init(bundle: bundle) }

    func category(bundle: Foundation.Bundle) -> category {
      .init(bundle: bundle)
    }
    func dishes(bundle: Foundation.Bundle) -> dishes {
      .init(bundle: bundle)
    }
    func finish(bundle: Foundation.Bundle) -> finish {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func restaurant(bundle: Foundation.Bundle) -> restaurant {
      .init(bundle: bundle)
    }
    func review(bundle: Foundation.Bundle) -> review {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.category.validate()
      try self.dishes.validate()
      try self.finish.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.restaurant.validate()
      try self.review.validate()
    }


    /// Storyboard `Category`.
    struct category: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Category"

      var categoryViewController: RswiftResources.StoryboardViewControllerIdentifier<CategoryViewController> { .init(identifier: "CategoryViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if categoryViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'categoryViewController' could not be loaded from storyboard 'Category' as 'CategoryViewController'.") }
      }
    }

    /// Storyboard `Dishes`.
    struct dishes: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Dishes"

      var dishesViewController: RswiftResources.StoryboardViewControllerIdentifier<DishesViewController> { .init(identifier: "DishesViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if dishesViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dishesViewController' could not be loaded from storyboard 'Dishes' as 'DishesViewController'.") }
      }
    }

    /// Storyboard `Finish`.
    struct finish: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Finish"

      var finishViewController: RswiftResources.StoryboardViewControllerIdentifier<FinishViewController> { .init(identifier: "FinishViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark' is used in storyboard 'Finish', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "DarkGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'DarkGreen' is used in storyboard 'Finish', but couldn't be loaded.") }
        if finishViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'finishViewController' could not be loaded from storyboard 'Finish' as 'FinishViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }

    /// Storyboard `Restaurant`.
    struct restaurant: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Restaurant"

      var restaurantViewController: RswiftResources.StoryboardViewControllerIdentifier<RestaurantViewController> { .init(identifier: "RestaurantViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if restaurantViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'restaurantViewController' could not be loaded from storyboard 'Restaurant' as 'RestaurantViewController'.") }
      }
    }

    /// Storyboard `Review`.
    struct review: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Review"

      var reviewViewController: RswiftResources.StoryboardViewControllerIdentifier<ReviewViewController> { .init(identifier: "ReviewViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "DarkGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'DarkGreen' is used in storyboard 'Review', but couldn't be loaded.") }
        if reviewViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'reviewViewController' could not be loaded from storyboard 'Review' as 'ReviewViewController'.") }
      }
    }
  }
}